<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2018%2F09%2F20%2Fmysql%E7%99%BE%E4%B8%87%E6%95%B0%E6%8D%AE%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[前言：在网上看了很多这样百万级数据、千万级数据查询的博客，分析过后他们的笔记都是一些简单的demo和一些简单的笔记，并不能完全体现在项目业务中的处理查询百万级数据。分析他们的一些处理要点大多是一张表插入了百万数据然后操作，一些简单直白的select xxx from t where xxx=xxx此语法，然而在公司项目业务中往往是要好几表关联查询数据。 一、一些操作查询百万数据的要点：1、最关键的就是加索引了，给要查询的字段直接加索引2、尽量避免使用or、in 、not in这样的语法，否则将会导致引擎放弃使用索引而进行全表扫描如： select id from t where num is null 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询： select id from t where num=0 select id from t where num=10 or num=20 可以这样查询： select id from t where num=10 union all select id from t where num=20 下面的查询也将导致全表扫描：(不能前置百分号) select id from t where name like ‘%c%’ 若要提高效率，可以考虑全文检索。 很多时候用 exists 代替 in 是一个好的选择： select num from a where num in(select num from b) 用下面的语句替换： select num from a where exists(select 1 from b where num=a.num) 二、2018年9月20日 自己本地数据库的测试，我在t_task表加了大约200万条数据 2.1 单表查询： #title已加了索引SELECT * FROM t_task WHERE title = ‘去阿富汗发传单904998’ //只用了0.002s确实很快 2.2 联表查询： 也只用了0.01sSELECT tt.id, tt.title, tt.isComeDate, DATE_FORMAT(tt.comeDate,’%Y-%m-%d %H:%i’) AS comeDate, DATE_FORMAT(tt.startDate,’%Y-%m-%d %H:%i’) AS startDate, DATE_FORMAT(tt.endDate,’%Y-%m-%d %H:%i’) AS endDate, tt.isWorkDate, tt.isSex, tt.terminate, tt.needNum, tt.number, tt.price, tt.timeType, tt.trusteeship, tt.isHot, ( CASE WHEN WEEKDAY(tt.comeDate) = 0 THEN ‘周一’ WHEN WEEKDAY(tt.comeDate) = 1 THEN ‘周二’ WHEN WEEKDAY(tt.comeDate) = 2 THEN ‘周三’ WHEN WEEKDAY(tt.comeDate) = 3 THEN ‘周四’ WHEN WEEKDAY(tt.comeDate) = 4 THEN ‘周五’ WHEN WEEKDAY(tt.comeDate) = 5 THEN ‘周六’ WHEN WEEKDAY(tt.comeDate) = 6 THEN ‘周日’ ELSE ‘’ END ) AS weekDay, tu.userName AS userName, tp.position AS position, ta.name AS areaName, ta2.name AS cityName FROM t_task tt LEFT JOIN t_user tu ON tu.id = tt.uid LEFT JOIN t_position tp ON tp.id = tt.positionId LEFT JOIN t_area ta ON ta.id = tt.area LEFT JOIN t_area ta2 ON ta2.id = tt.cityWHERE title = ‘去阿富汗发传单904998’ 以上查询都是查单条数据，那么我要查一个集合呢？查sex等于1的，或是查其他条件的集合，就直接崩溃了 解决方法：使用id限定优化 就是当此表id主键是自增的情况下，我们设定查询id的范围，给id定位查询出数据，再根据这些数据进行查询。 #只用了0.318s，这里抛弃了190万之前的历史数据，一般页面不会一直显示几百万的数据，几百万的数据全查出来都会有几十万页，一般人十几页都懒得翻，所以没必要查几十万页，显示几百来页就行了SELECT FROM t_task WHERE id &gt;= 1900000 //不建议写来查，最好要查什么字段就写什么字段，哪怕全查也要把全部字段写出来，我这里是为了方便，测试用的 SELECT id FROM t_task WHERE id &gt;= 1900000 //直接写字段名查询，只用了0.035s,查询速度提升了10倍，所以说不建议写*来查数据 基本就是这样了，感觉这还够，以后找机会再弄吧]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F09%2F19%2FmyFirstBlog%2F</url>
    <content type="text"><![CDATA[啊西吧啊西吧，有点小激动]]></content>
  </entry>
  <entry>
    <title><![CDATA[My New Post]]></title>
    <url>%2F2018%2F09%2F18%2FMy-New-Post%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F17%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
